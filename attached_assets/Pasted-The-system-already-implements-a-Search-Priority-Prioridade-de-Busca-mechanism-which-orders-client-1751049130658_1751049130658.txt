The system already implements a Search Priority (Prioridade de Busca) mechanism, which orders clients based on a pre-configured priority table. The search priority table includes:

Client Name

Email Domain

Numeric Search Priority (lower values = higher priority)

Example:

pgsql
Copiar
Editar
Priority | Client Name | Email Domain
1        | BRADESCO    | bradesco.com.br
2        | PETROBRAS   | petrobras.com.br
3        | ONS         | ons.org.br
4        | EMBRAER     | embraer.com.br
5        | REDE DOR    | rededorsaoluiz.com.br
Requirement:
Extend the existing Search Priority system by integrating AI-based super processing to enhance document classification, priority adjustment, and contextual understanding in real-time.

Processing Logic:
Load the existing Search Priority table at the beginning of the process.

Process documents in the order defined by the Search Priority.

For each document:

Identify the client by:

Checking if the Client Name is present in the document.

Checking if email domains associated with the client are present in the document.

AI Super Processing Extension:
Introduce a parallel processing architecture to handle multiple documents simultaneously, aligned with the Search Priority order.

Integrate multi-layer AI engines:

Layer 1: Regex-based personal data extraction (CPF, email, phone).

Layer 2: spaCy NER for named entity recognition to confirm entities related to the prioritized client.

Layer 3: Large Language Model (LLM) to:

Understand document semantic context.

Identify sensitive clauses or critical information.

Decide if document priority should be dynamically escalated.

Dynamic Priority Adjustment:
The AI system must be allowed to override the static Search Priority based on:

Critical semantic content.

AI confidence thresholds.

Contextual sensitivity.

Example decision rule:

python
Copiar
Editar
if llm_detected == 'highly sensitive clause' and ai_confidence > 0.85:
    document_priority = 'Immediate Processing'
else:
    document_priority = search_priority_table[client]
Database Requirements:
Store per document:

Identified Client

Extracted Data

Static Search Priority

AI-Adjusted Processing Priority

AI Confidence Score

Source of Decision (Regex, spaCy, LLM)

System Behavior:
Search Priority remains the main control for processing order.

AI dynamically adjusts priority within or across client queues if criticality is detected.

The priority table can be updated live and reloaded without stopping the system.

Optional:
Provide a real-time dashboard showing:

Search Priority Queue

AI-Adjusted Priority

Processing volumes and status

Logs of priority adjustments

Objective:
Build a hybrid priority management system where Search Priority governs the base order, but AI can dynamically accelerate the processing of semantically critical documents, ensuring risk-sensitive processing with maximum efficiency.