#!/bin/bash

# n.crisisops - LGPD Privacy Module - Fix Database Quick
# Script r√°pido para corrigir problemas do banco PostgreSQL

echo "üîß n.crisisops - LGPD Privacy Module - Fix Database Quick"
echo "================================================================="

# Vari√°veis
INSTALL_DIR="/opt/privacy"
DB_NAME="privacy_db"
DB_USER="privacy_user"
DB_PASS="Lgpd2025#Privacy"

echo "üìã Verificando PostgreSQL..."

# Verificar se PostgreSQL est√° rodando
if ! systemctl is-active --quiet postgresql; then
    echo "‚ö†Ô∏è PostgreSQL n√£o est√° rodando. Iniciando..."
    systemctl start postgresql
    systemctl enable postgresql
fi

echo "‚úÖ PostgreSQL est√° rodando"

echo "üîç Verificando banco de dados..."

# Verificar se o banco existe
if ! sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw "$DB_NAME"; then
    echo "‚ö†Ô∏è Banco $DB_NAME n√£o existe. Criando..."
    
    # Criar banco e usu√°rio
    sudo -u postgres psql << EOF
-- Criar usu√°rio se n√£o existir
DO \$\$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '$DB_USER') THEN
        CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';
    END IF;
END
\$\$;

-- Criar banco
CREATE DATABASE $DB_NAME OWNER $DB_USER;

-- Conceder privil√©gios
GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;
ALTER USER $DB_USER CREATEDB;
EOF

    echo "‚úÖ Banco $DB_NAME criado"
else
    echo "‚úÖ Banco $DB_NAME j√° existe"
fi

echo "üì¶ Verificando psycopg2..."

# Verificar se psycopg2 est√° instalado
cd $INSTALL_DIR
source venv/bin/activate

if ! python -c "import psycopg2" 2>/dev/null; then
    echo "‚ö†Ô∏è psycopg2 n√£o est√° instalado. Instalando..."
    pip install psycopg2-binary
    echo "‚úÖ psycopg2 instalado"
else
    echo "‚úÖ psycopg2 j√° est√° instalado"
fi

echo "üöÄ Criando script de popula√ß√£o..."

# Criar script de popula√ß√£o
cat > populate-database.py << 'EOF'
#!/usr/bin/env python3
"""
Script para popular o banco de dados PostgreSQL com dados iniciais
n.crisisops - LGPD Privacy Module
"""

import os
import sys
import psycopg2
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configura√ß√µes do banco
DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'database': 'privacy_db',
    'user': 'privacy_user',
    'password': 'Lgpd2025#Privacy'
}

def test_connection():
    """Testa a conex√£o com o banco de dados"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        conn.close()
        logger.info("‚úÖ Conex√£o com PostgreSQL estabelecida")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erro na conex√£o com PostgreSQL: {e}")
        return False

def create_tables():
    """Cria as tabelas necess√°rias"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        # Tabela de padr√µes regex
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS regex_patterns (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) UNIQUE NOT NULL,
                pattern TEXT NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Tabela de prioridades de busca
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS search_priorities (
                id SERIAL PRIMARY KEY,
                priority INTEGER NOT NULL,
                company_name VARCHAR(200) NOT NULL,
                domain VARCHAR(200),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Tabela de resultados de extra√ß√£o
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS extraction_results (
                id SERIAL PRIMARY KEY,
                file_name VARCHAR(255) NOT NULL,
                file_type VARCHAR(50),
                extraction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                total_items INTEGER DEFAULT 0,
                cpf_count INTEGER DEFAULT 0,
                email_count INTEGER DEFAULT 0,
                phone_count INTEGER DEFAULT 0,
                rg_count INTEGER DEFAULT 0,
                cep_count INTEGER DEFAULT 0,
                name_count INTEGER DEFAULT 0,
                birth_date_count INTEGER DEFAULT 0,
                results_json TEXT,
                processing_time FLOAT,
                status VARCHAR(50) DEFAULT 'completed'
            )
        """)
        
        # Tabela de configura√ß√µes do sistema
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS system_config (
                id SERIAL PRIMARY KEY,
                key VARCHAR(100) UNIQUE NOT NULL,
                value TEXT,
                description TEXT,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        conn.commit()
        cursor.close()
        conn.close()
        
        logger.info("‚úÖ Tabelas criadas com sucesso")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar tabelas: {e}")
        return False

def insert_regex_patterns():
    """Insere padr√µes regex padr√£o"""
    patterns = [
        ('CPF', r'\b\d{3}\.?\d{3}\.?\d{3}-?\d{2}\b', 'CPF brasileiro com ou sem formata√ß√£o'),
        ('RG', r'\b\d{1,2}\.?\d{3}\.?\d{3}-?[0-9Xx]\b', 'RG com formata√ß√£o SP'),
        ('EMAIL', r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', 'Endere√ßo de email v√°lido'),
        ('TELEFONE', r'\(?\d{2}\)?\s?9?\d{4}-?\d{4}', 'Telefone celular e fixo brasileiro'),
        ('CEP', r'\b\d{5}-?\d{3}\b', 'CEP brasileiro'),
        ('DATA_NASCIMENTO', r'\b\d{1,2}\/\d{1,2}\/\d{4}\b', 'Data no formato DD/MM/AAAA'),
        ('NOME_COMPLETO', r'\b[A-Z][a-z]+\s+[A-Z][a-z]+(?:\s+[A-Z][a-z]+)*\b', 'Nome completo com inicial mai√∫scula'),
        ('CNPJ', r'\b\d{2}\.?\d{3}\.?\d{3}\/?\d{4}-?\d{2}\b', 'CNPJ brasileiro'),
        ('PIS', r'\b\d{3}\.?\d{5}\.?\d{2}-?\d{1}\b', 'PIS/PASEP'),
        ('TITULO_ELEITOR', r'\b\d{4}\s?\d{4}\s?\d{4}\b', 'T√≠tulo de eleitor')
    ]
    
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        for name, pattern, description in patterns:
            cursor.execute("""
                INSERT INTO regex_patterns (name, pattern, description)
                VALUES (%s, %s, %s)
                ON CONFLICT (name) DO UPDATE SET
                    pattern = EXCLUDED.pattern,
                    description = EXCLUDED.description
            """, (name, pattern, description))
        
        conn.commit()
        cursor.close()
        conn.close()
        
        logger.info(f"‚úÖ {len(patterns)} padr√µes regex inseridos")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao inserir padr√µes regex: {e}")
        return False

def insert_search_priorities():
    """Insere prioridades de busca empresariais"""
    priorities = [
        (1, 'Banco Bradesco', 'bradesco.com.br'),
        (1, 'Petrobras', 'petrobras.com.br'),
        (1, 'ONS', 'ons.org.br'),
        (1, 'Banco Central', 'bcb.gov.br'),
        (2, 'Banco do Brasil', 'bb.com.br'),
        (2, 'Caixa Econ√¥mica Federal', 'caixa.gov.br'),
        (2, 'Ita√∫ Unibanco', 'itau.com.br'),
        (2, 'Santander', 'santander.com.br'),
        (3, 'Vale', 'vale.com'),
        (3, 'Ambev', 'ambev.com.br'),
        (3, 'JBS', 'jbs.com.br')
    ]
    
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        for priority, company, domain in priorities:
            cursor.execute("""
                INSERT INTO search_priorities (priority, company_name, domain)
                VALUES (%s, %s, %s)
                ON CONFLICT DO NOTHING
            """, (priority, company, domain))
        
        conn.commit()
        cursor.close()
        conn.close()
        
        logger.info(f"‚úÖ {len(priorities)} prioridades empresariais inseridas")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao inserir prioridades: {e}")
        return False

def insert_system_config():
    """Insere configura√ß√µes padr√£o do sistema"""
    configs = [
        ('max_file_size', '104857600', 'Tamanho m√°ximo de arquivo em bytes (100MB)'),
        ('allowed_extensions', 'pdf,doc,docx,txt,eml,msg,rtf', 'Extens√µes de arquivo permitidas'),
        ('processing_timeout', '300', 'Timeout de processamento em segundos'),
        ('enable_ai_processing', 'true', 'Habilitar processamento com IA'),
        ('enable_semantic_analysis', 'true', 'Habilitar an√°lise sem√¢ntica'),
        ('log_level', 'INFO', 'N√≠vel de log do sistema'),
        ('backup_enabled', 'true', 'Habilitar backup autom√°tico'),
        ('ssl_enabled', 'true', 'Habilitar SSL/TLS')
    ]
    
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        for key, value, description in configs:
            cursor.execute("""
                INSERT INTO system_config (key, value, description)
                VALUES (%s, %s, %s)
                ON CONFLICT (key) DO UPDATE SET
                    value = EXCLUDED.value,
                    description = EXCLUDED.description,
                    updated_at = CURRENT_TIMESTAMP
            """, (key, value, description))
        
        conn.commit()
        cursor.close()
        conn.close()
        
        logger.info(f"‚úÖ {len(configs)} configura√ß√µes do sistema inseridas")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao inserir configura√ß√µes: {e}")
        return False

def verify_database():
    """Verifica se o banco foi populado corretamente"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        # Verificar tabelas
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        """)
        tables = [row[0] for row in cursor.fetchall()]
        
        # Verificar dados
        cursor.execute("SELECT COUNT(*) FROM regex_patterns")
        patterns_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM search_priorities")
        priorities_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM system_config")
        config_count = cursor.fetchone()[0]
        
        cursor.close()
        conn.close()
        
        logger.info(f"‚úÖ Verifica√ß√£o conclu√≠da:")
        logger.info(f"   - Tabelas criadas: {', '.join(tables)}")
        logger.info(f"   - Padr√µes regex: {patterns_count}")
        logger.info(f"   - Prioridades: {priorities_count}")
        logger.info(f"   - Configura√ß√µes: {config_count}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    logger.info("üöÄ Iniciando popula√ß√£o do banco de dados PostgreSQL")
    
    # Testar conex√£o
    if not test_connection():
        sys.exit(1)
    
    # Criar tabelas
    if not create_tables():
        sys.exit(1)
    
    # Inserir dados
    if not insert_regex_patterns():
        sys.exit(1)
    
    if not insert_search_priorities():
        sys.exit(1)
    
    if not insert_system_config():
        sys.exit(1)
    
    # Verificar resultado
    if not verify_database():
        sys.exit(1)
    
    logger.info("üéâ Popula√ß√£o do banco de dados conclu√≠da com sucesso!")
    return True

if __name__ == "__main__":
    main()
EOF

echo "üöÄ Executando script de popula√ß√£o..."

# Executar script de popula√ß√£o
python3 populate-database.py

if [ $? -eq 0 ]; then
    echo "‚úÖ Script de popula√ß√£o executado com sucesso"
else
    echo "‚ùå Erro ao executar script de popula√ß√£o"
    exit 1
fi

echo "üîê Configurando permiss√µes..."

# Definir permiss√µes corretas
chown -R privacy:privacy $INSTALL_DIR
chmod +x populate-database.py

echo "üöÄ Reiniciando servi√ßo..."

# Reiniciar servi√ßo
systemctl restart privacy

echo "‚è≥ Aguardando inicializa√ß√£o..."
sleep 10

echo "üß™ Testando aplica√ß√£o..."

# Verificar se a aplica√ß√£o responde
if curl -f -s http://localhost:5000 > /dev/null; then
    echo "‚úÖ Aplica√ß√£o respondendo corretamente"
else
    echo "‚ùå Aplica√ß√£o n√£o responde, verificando logs..."
    journalctl -u privacy --no-pager -l -n 20
fi

echo ""
echo "================================================================="
echo "‚úÖ CORRE√á√ÉO R√ÅPIDA CONCLU√çDA!"
echo "================================================================="
echo "üóÑÔ∏è Banco: $DB_NAME"
echo "üë§ Usu√°rio: $DB_USER"
echo "üìÅ Diret√≥rio: $INSTALL_DIR"
echo ""
echo "üìã Comandos √∫teis:"
echo "   sudo systemctl status privacy"
echo "   sudo journalctl -u privacy -f"
echo "   sudo -u postgres psql -d $DB_NAME -c 'SELECT COUNT(*) FROM regex_patterns;'"
echo "=================================================================" 