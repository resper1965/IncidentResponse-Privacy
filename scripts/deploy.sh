#!/bin/bash

# =============================================================================
# Script de Deploy Completo - n.crisisops
# Sistema LGPD de Compliance e Resposta a Incidentes
# =============================================================================

set -e

VPS_HOST="monster.e-ness.com.br"
VPS_USER="root"
REMOTE_DIR="/opt/privacy/app"

echo "üöÄ Iniciando deploy do n.crisisops..."

# Verificar se os arquivos essenciais existem
REQUIRED_FILES=(
    "web_interface.py"
    "database_postgresql.py" 
    "file_reader.py"
    "data_extractor.py"
    "file_scanner.py"
    "ai_super_processor.py"
    "ai_processor_simplified.py"
    "templates/dashboard.html"
)

echo "üìã Verificando arquivos necess√°rios..."
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ] && [ ! -d "$(dirname $file)" ]; then
        echo "‚ùå Arquivo ausente: $file"
        exit 1
    fi
    echo "‚úÖ $file"
done

# Criar arquivo tempor√°rio com todos os arquivos Python
echo "üì¶ Preparando arquivos para deploy..."

# Copiar scripts de instala√ß√£o
echo "üìã Copiando scripts de instala√ß√£o..."
scp install_service.sh fix_502.sh debug_service.sh test_postgresql.sh $VPS_USER@$VPS_HOST:/tmp/

# Executar instala√ß√£o da infraestrutura na VPS
echo "üèóÔ∏è Instalando infraestrutura na VPS..."
ssh $VPS_USER@$VPS_HOST "cd /tmp && chmod +x install_service.sh && ./install_service.sh"

# Criar diret√≥rio de templates na VPS
echo "üìÅ Criando estrutura de diret√≥rios..."
ssh $VPS_USER@$VPS_HOST "mkdir -p $REMOTE_DIR/templates"

# Copiar arquivos Python principais
echo "üìÑ Copiando arquivos da aplica√ß√£o..."
scp web_interface.py $VPS_USER@$VPS_HOST:$REMOTE_DIR/
scp database_postgresql.py $VPS_USER@$VPS_HOST:$REMOTE_DIR/
scp file_reader.py $VPS_USER@$VPS_HOST:$REMOTE_DIR/
scp data_extractor.py $VPS_USER@$VPS_HOST:$REMOTE_DIR/
scp file_scanner.py $VPS_USER@$VPS_HOST:$REMOTE_DIR/
scp ai_super_processor.py $VPS_USER@$VPS_HOST:$REMOTE_DIR/
scp ai_processor_simplified.py $VPS_USER@$VPS_HOST:$REMOTE_DIR/

# Copiar arquivos opcionais se existirem
OPTIONAL_FILES=(
    "database.py"
    "main.py"
    "ai_enhanced_processor.py"
)

for file in "${OPTIONAL_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo "üìÑ Copiando arquivo opcional: $file"
        scp $file $VPS_USER@$VPS_HOST:$REMOTE_DIR/
    fi
done

# Copiar templates
echo "üé® Copiando templates..."
if [ -d "templates" ]; then
    scp -r templates/* $VPS_USER@$VPS_HOST:$REMOTE_DIR/templates/
else
    echo "‚ö†Ô∏è Diret√≥rio templates n√£o encontrado"
fi

# Ajustar permiss√µes na VPS
echo "üîê Ajustando permiss√µes..."
ssh $VPS_USER@$VPS_HOST "chown -R privacy:privacy $REMOTE_DIR"
ssh $VPS_USER@$VPS_HOST "chmod 644 $REMOTE_DIR/*.py"
ssh $VPS_USER@$VPS_HOST "chmod 644 $REMOTE_DIR/templates/*" 2>/dev/null || true

# Inicializar banco de dados
echo "üíæ Inicializando banco de dados..."
ssh $VPS_USER@$VPS_HOST "cd $REMOTE_DIR && sudo -u privacy /opt/privacy/venv/bin/python -c 'import database_postgresql; database_postgresql.initialize_postgresql_database()'" || echo "‚ö†Ô∏è Erro na inicializa√ß√£o do banco - continuando..."

# Iniciar servi√ßo
echo "üöÄ Iniciando servi√ßo privacy..."
ssh $VPS_USER@$VPS_HOST "systemctl daemon-reload"
ssh $VPS_USER@$VPS_HOST "systemctl enable privacy"
ssh $VPS_USER@$VPS_HOST "systemctl restart privacy"

# Aguardar inicializa√ß√£o
echo "‚è≥ Aguardando inicializa√ß√£o do servi√ßo..."
sleep 15

# Verificar status
echo "üìä Verificando status do servi√ßo..."
if ssh $VPS_USER@$VPS_HOST "systemctl is-active --quiet privacy"; then
    echo "‚úÖ Servi√ßo privacy ativo"
    
    # Testar health check
    if ssh $VPS_USER@$VPS_HOST "curl -s http://localhost:5000/health" > /dev/null 2>&1; then
        echo "‚úÖ Health check local funcionando"
        
        # Testar acesso externo
        echo "üåç Testando acesso externo..."
        if curl -s http://$VPS_HOST/health > /dev/null 2>&1; then
            echo "‚úÖ Acesso externo funcionando"
            echo "üéâ Deploy conclu√≠do com sucesso!"
            echo "üåê Sistema dispon√≠vel em: http://$VPS_HOST"
        else
            echo "‚ö†Ô∏è Acesso externo com problema - verificar Nginx"
        fi
    else
        echo "‚ùå Health check local falhou"
    fi
else
    echo "‚ùå Servi√ßo privacy falhou - verificando logs..."
    ssh $VPS_USER@$VPS_HOST "journalctl -u privacy --no-pager -n 10"
    
    echo ""
    echo "üîß Executando corre√ß√£o autom√°tica..."
    ssh $VPS_USER@$VPS_HOST "cd /tmp && ./fix_502.sh"
fi

echo ""
echo "üìã Comandos √∫teis para monitoramento:"
echo "   ssh $VPS_USER@$VPS_HOST 'systemctl status privacy'"
echo "   ssh $VPS_USER@$VPS_HOST 'journalctl -u privacy -f'"
echo "   ssh $VPS_USER@$VPS_HOST 'curl http://localhost:5000/health'"

echo ""
echo "‚úÖ Deploy finalizado!"